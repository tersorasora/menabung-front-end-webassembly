@page "/admin"
@using System.Text.Json
@using System.Net.Http.Headers
@inject NavigationManager NavManager
@inject HttpClient Http
@inject TokenService tokenService
@inject IJSRuntime JS

<PageTitle>Admin Dashboard</PageTitle>


    @if (isCheckingAdmin)
    {
        <div class="d-flex align-items-center justify-content-center vh-100">
            <h2 class="fw-bold text-center text-danger">
                HOLD ON RETARD, WHO TF ARE YOU??
            </h2>
        </div>
    }
    else if (!isAdmin)
    {
        <div class="d-flex align-items-center justify-content-center vh-100 bg-danger bg-opacity-10">
            <h2 class="fw-bold text-center text-danger">
                ðŸš« Access Denied. Admins Only. <br /> GET LOST KIDDO!
            </h2>
        </div>
    }
    else
    {
        <div class="p-4">
            <h2 class="text-2xl font-bold mb-4 text-center">Admin Dashboard</h2>

            <!-- USERS TABLE -->
            <div class="card shadow-sm p-4 mb-5">
                <h4 class="fw-bold mb-3">All Users</h4>
                <div class="table-container">
                    <div class="static-table">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">ID</th>
                                    <th scope="col">Username</th>
                                    <th scope="col">Nickname</th>
                                    <th scope="col">Password</th>
                                    <th scope="col">Balance</th>
                                    <th scope="col">Is Banned?</th>
                                    <th scope="col">Role</th>
                                    <th scope="col">Total Transactions</th>
                                    <th scope="coll">Operations</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in PagedUsers)
                                {
                                    <tr>
                                        <td>@user.Id</td>
                                        <td>@user.Email</td>
                                        <td>@user.Nickname</td>
                                        <td>@user.Password</td>
                                        <td>@user.Balance</td>
                                        <td>@user.Banned</td>
                                        <td>@user.Role</td>
                                        <td>@user.TotalTransactions</td>
                                        <td><button class="btn @(user.Banned ? "btn-success" : "btn-danger")" @onclick="() => BanUser(user.Id, user.Nickname, user.Banned)">
                                            @if(user.Banned)
                                            {
                                                <span class="bi bi-check-lg"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-ban"></i>
                                            }
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="pagination-container d-flex mt-3 justify-content-start align-items-center">
                    <button class="btn btn-outline-secondary me-2" @onclick="() => ChangeUserPage(CurrentUserPage - 1)" disabled="@(CurrentUserPage == 1)">
                        Previous
                    </button>

                    <span class="fw-bold">@CurrentUserPage</span>

                    <button class="btn btn-outline-secondary ms-2" @onclick="() => ChangeUserPage(CurrentUserPage + 1)" disabled="@(CurrentUserPage == TotalUserPages)">
                        Next
                    </button>
                </div>
            </div>

            <!-- TRANSACTIONS TABLE -->
            <div class="card shadow-sm p-4">
                <h4 class="fw-bold mb-3">All Transactions</h4>
                <div class="table-container">
                    <div class="static-table">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">ID</th>
                                    <th scope="col">Description</th>
                                    <th scope="col">Type</th>
                                    <th scope="col">Nominal</th>
                                    <th scope="col">Date</th>
                                    <th scope="col">User</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var trx in PagedTransactions)
                                {
                                    <tr>
                                        <td>@trx.Id</td>
                                        <td>@trx.Description</td>
                                        <td>@trx.Type</td>
                                        <td>@trx.Nominal</td>
                                        <td>@trx.Date.ToShortDateString()</td>
                                        <td>@trx.User</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="pagination-container d-flex mt-3 justify-content-start align-items-center">
                    <button class="btn btn-outline-secondary me-2" @onclick="() => ChangeTransactionPage(CurrentTransactionPage - 1)" disabled="@(CurrentTransactionPage == 1)">
                        Previous
                    </button>

                    <span class="fw-bold">@CurrentTransactionPage</span>

                    <button class="btn btn-outline-secondary ms-2" @onclick="() => ChangeTransactionPage(CurrentTransactionPage + 1)" disabled="@(CurrentTransactionPage == TotalTransactionPages)">
                        Next
                    </button>
                </div>
            </div>
        </div>
    }

@code {
    private List<UserModel> AllUsers = new();
    private List<TransactionModel> AllTransactions = new();

    private int CurrentUserPage = 1;
    private int CurrentTransactionPage = 1;
    private int PageSize = 10;

    private IEnumerable<UserModel> PagedUsers =>
        AllUsers.Skip((CurrentUserPage - 1) * PageSize).Take(PageSize);

    private IEnumerable<TransactionModel> PagedTransactions =>
        AllTransactions.Skip((CurrentTransactionPage - 1) * PageSize).Take(PageSize);

    private int TotalUserPages => (int)Math.Ceiling(AllUsers.Count / (double)PageSize);
    private int TotalTransactionPages => (int)Math.Ceiling(AllTransactions.Count / (double)PageSize);

    private bool isCheckingAdmin = true;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        await tokenService.InitializeAsync();

        var userId = int.Parse(tokenService.UserId ?? "0");
        var roleID = int.Parse(tokenService.RoleId ?? "0");
        Console.WriteLine($"Role ID: {roleID}");
        if (roleID != 1)
        {
            NavManager.NavigateTo("/", forceLoad: true);
            await JS.InvokeVoidAsync("alert", "Get Lost Kiddo! Admins Only!");
        }else{
            isAdmin = true;
        }
        isCheckingAdmin = false;

        await FetchAllUsers();
        await FetchAllTransactions();
    }

    private async Task FetchAllUsers()
    {
        try{
            var response = await Http.GetAsync("user/GetAllUsers");
            response.EnsureSuccessStatusCode();

            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            AllUsers.Clear();
            
            foreach(var jsonUser in json.EnumerateArray())
            {
                var tempUser = new UserModel
                {
                    Id = jsonUser.GetProperty("user_id").GetInt32(),
                    Email = jsonUser.GetProperty("email").GetString() ?? string.Empty,
                    Nickname = jsonUser.GetProperty("nickname").GetString() ?? string.Empty,
                    Password = jsonUser.GetProperty("password").GetString() ?? string.Empty,
                    Balance = jsonUser.GetProperty("balance").GetDecimal(),
                    Banned = jsonUser.GetProperty("banned").GetBoolean()
                };

                // Get Role Name
                var roleResponse = await Http.GetAsync($"role/{jsonUser.GetProperty("role_id").GetInt32()}");
                if (roleResponse.IsSuccessStatusCode)
                {
                    var roleJson = await roleResponse.Content.ReadFromJsonAsync<JsonElement>();
                    tempUser.Role = roleJson.GetProperty("role_name").GetString() ?? string.Empty;
                }

                // Get Total Transactions
                var transactionResponse = await Http.GetAsync($"transaction/CountUserTransactions/{jsonUser.GetProperty("user_id").GetInt32()}");
                if (transactionResponse.IsSuccessStatusCode)
                {
                    var transactionJson = await transactionResponse.Content.ReadFromJsonAsync<JsonElement>();
                    tempUser.TotalTransactions = transactionJson.GetProperty("total_transactions").GetInt32();
                }

                AllUsers.Add(tempUser);
            }
        }catch(Exception ex){
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    private async Task FetchAllTransactions()
    {
        try{
            var response = await Http.GetAsync("transaction/GetAllTransactions");
            response.EnsureSuccessStatusCode();

            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            AllTransactions.Clear();

            foreach (var jsonTransaction in json.EnumerateArray())
            {
                var tempTransactions = new TransactionModel
                {
                    Id = jsonTransaction.GetProperty("transaction_id").GetInt32(),
                    Description = jsonTransaction.GetProperty("description").GetString() ?? string.Empty,
                    Type = jsonTransaction.GetProperty("transaction_type").GetString() ?? string.Empty,
                    Nominal = jsonTransaction.GetProperty("transaction_nominal").GetDecimal(),
                    Date = jsonTransaction.GetProperty("transaction_date").GetDateTime()
                };

                // Get Nickname for the transaction user
                var userResponse = await Http.GetAsync($"user/{jsonTransaction.GetProperty("user_id").GetInt32()}");
                if (userResponse.IsSuccessStatusCode)
                {
                    var userJson = await userResponse.Content.ReadFromJsonAsync<JsonElement>();
                    tempTransactions.User = userJson.GetProperty("nickname").GetString() ?? string.Empty;
                }

                AllTransactions.Add(tempTransactions);
            }
        }catch(Exception ex){
            Console.WriteLine($"Error fetching transactions: {ex.Message}");
        }
    }

    private async Task BanUser(int userId, string nickname, bool isBanned)
    {
        if(isBanned)
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Nigga, Are you sure you want to UnBanned {nickname}???");
            if(confirmed)
            {
                var user = AllUsers.FirstOrDefault(u => u.Id == userId);
                if (user != null)
                {
                    var token = tokenService.Token;
                    var request = new HttpRequestMessage(HttpMethod.Put, $"user/unban/{userId}");
                    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    var response = await Http.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        user.Banned = false;
                        StateHasChanged();
                    }else
                    {
                        Console.WriteLine($"Error unbanning user: {response.ReasonPhrase}");
                    }
                }
            }
        }else
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Nigga, Are you sure you want to ban {nickname}???");
            if (confirmed)
            {
                var user = AllUsers.FirstOrDefault(u => u.Id == userId);
                if (user != null)
                {
                    var token = tokenService.Token;
                    var request = new HttpRequestMessage(HttpMethod.Put, $"user/ban/{userId}");
                    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    var response = await Http.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        user.Banned = true;
                        StateHasChanged();
                    }else
                    {
                        Console.WriteLine($"Error banning user: {response.ReasonPhrase}");
                    }
                }
            }
        }
    }

    private void ChangeUserPage(int page)
    {
        if (page >= 1 && page <= TotalUserPages)
            CurrentUserPage = page;
    }

    private void ChangeTransactionPage(int page)
    {
        if (page >= 1 && page <= TotalTransactionPages)
            CurrentTransactionPage = page;
    }

    public class UserModel
    {
        public int Id { get; set; }
        public string Email { get; set; } = string.Empty;
        public string Nickname { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public bool Banned { get; set; } = false;
        public string Role { get; set; } = string.Empty;
        public int TotalTransactions { get; set; }
    }

    public class TransactionModel
    {
        public int Id { get; set; }
        public string Description { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public decimal Nominal { get; set; }
        public DateTime Date { get; set; }
        public string User { get; set; } = string.Empty;
    }
}
