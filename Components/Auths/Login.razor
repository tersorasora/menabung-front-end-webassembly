@page "/login"
@layout NoLayout
@using System.Net.Http
@using BlazorAppWeb.Components.Layout
@inject IJSRuntime JS
@inject AuthService Auth
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Login</PageTitle>

<div class="login-wrapper">
    <div class="login-card">
        <h2>Welcome Back</h2>
        <p class="subtitle">Please sign in to continue</p>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="form-login">
            <div class="input-group">
                <input @bind-value="loginModel.Username" type="text" placeholder="Username" class="input-field" />
            </div>

            <div class="input-group">
                <input @bind-value="loginModel.Password" type="password" placeholder="Password" class="input-field" />
            </div>

            <button type="submit" class="btn-login">Sign In</button>
        </EditForm>

        <a href="/register">Don't have an account?</a>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="message">@message</p>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string message = string.Empty;

    private async Task HandleLogin()
    {
        Console.WriteLine($"Attempting login: {loginModel.Username} / {loginModel.Password}");

        var response = await Http.PostAsJsonAsync("user/login", new 
        { 
            username = loginModel.Username, 
            password = loginModel.Password 
        });

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            message = "Login Successful!";

            if (result is not null && !string.IsNullOrEmpty(result.Token))
            {
                // save token in browser localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "token", result.Token);

                message = "Login Successful! Redirecting...";
                
                // delay for user to see the message
                await Task.Delay(1000);

                // Redirect to home
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                message = "Login succeeded but no token was returned!";
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            message = $"Login failed ({response.StatusCode}): {error}";
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResult
    {
        public string Token { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }

}
